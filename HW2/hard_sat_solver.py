"""Solves a real hard SAT problem inputted as DIMACS format
    SAT problem generated by file random_ksat.py provided by
    Henry Yeun and Joseph Bebel. See file for more details"""


import sys
from z3 import *
import argparse
import numpy as np


def parseArgs(args):
    """ Parse Args for this script """

    parser = argparse.ArgumentParser(description="This script takes an input file that defines preconditions for \
                                                    a sudoku and solves it")

    parser.add_argument("--num_vars", "-nv", type=int, dest="num_vars", default=300,
                        help="Number of variables in sat formula. Default = 300")

    parser.add_argument("--input_file", "-if", type=str, dest="input_file", default="sat_problem.txt",
                        help="Name of sat problem input file in DIMACS format. Default=\"sat_problem.txt\"")

    parser.add_argument("--output_file", "-of", type=str, dest="output_file", default="sat_smt_encoding.smt2",
                        help="Name of the output file to place smt2 encoding in. Default=\"sat_smt_encoding.smt2\"")

    args = parser.parse_args(args)

    return args


def gen_vars(args):
    """ Function to generate bool vars for sat problem """

    tot_vars = []

    for i in range(1, args.num_vars + 1):
        tot_vars.append(i)

    return tot_vars


def sat_solver(args, tot_vars, output=True):
    """ Main sat solver portion"""

    if(output):
        print("Number of boolean vars = " + str(len(tot_vars)))


    bool_vars = {e: Bool(e) for e in tot_vars}

    s = Solver()

    clauses = []

    with open(args.input_file, "r") as fn:
        for line in fn:
            line = line.strip()
            if("c" in line or "p" in line):
                continue

            vals = []
            line_vars = line.split(" ")[:-1]
            for v in line_vars:
                if("-" in v):
                    v = v.split('-')[1]
                    vals.append(Not(bool_vars[int(v)]))
                else:
                    vals.append(bool_vars[int(v)])

            clauses.append(Or(vals))

    s.add(And(clauses))

    if(s.check() == sat):
        model = s.model()
        if(output):
            print("Sat!")
            # print(model)

        # output smt2 format to file
        with open(args.output_file, 'w') as fn:
            smt2_output = s.to_smt2()
            fn.write(smt2_output + "\n")

        return True, model

    else:
        if(output):
            print("Unsat!")
        model = []
        return False, model


def main(args):
    """Main entry point for this program"""

    args = parseArgs(args)

    tot_vars = gen_vars(args)

    solvable, model = sat_solver(args, tot_vars)


if __name__ == '__main__':
    main(sys.argv[1:])